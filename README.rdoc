= Hooks

<em>Generic hooks with callbacks for Ruby.</em>


== Introduction

_Hooks_ lets you define hooks declaratively in your ruby class. You can add callbacks to your hook, which will be run as soon as _you_ run the hook!

It's almost like ActiveSupport::Callbacks but 76,6% less complex. Instead, it is not more than 60 lines of code, one method compilation, no +method_missing+ and no magic.


== Example

Let's take... a cat.

  class Cat
    include Hooks

    define_hook :after_dinner

Now you can add callbacks to your hook declaratively in your class.

    after_dinner do
      puts "Ice cream!"
    end

    after_dinner :have_a_desert   # => refers to Cat#have_a_desert

    def have_a_desert
      puts "Hell, yeah!"
    end

Running the callbacks happens on instances. It will run the block and #have_a_desert from above.

  cat.run_hook :after_dinner
  # => Ice cream!
       Hell, yeah!

A complete example to put it all together:

  require 'hooks'

  # That's the generic cat. It does pretty much nothing.
  # It's not really a *cat* by the way, just a Ruby class.
  # Don't forget to document this properly, cats are literate coders.
  class Cat
    include Hooks

    @likes = 'food'
    define_hook :after_dinner # void default implementation

    def dinner_time!
      puts "It's dinner time!"
      run_hook :after_dinner, @likes
    end
  end

  # But here's *my* REAL cat. It's dumb and hangry. It's a cat.
  # MY CAT.
  class MyCat < Cat
    def initialize(likes = nil)
      @likes = likes ? likes : 'food'
    end

    after_dinner do |what|
      puts "I had a great time. I'd like some more #{what}!"
    end

    after_dinner :want_some_more

    def want_some_more(what)
      puts "No, really, is there some more #{@likes}?"
    end
  end

  # dumb cat
  Cat.new.dinner_time! # => It's dinner time!

  # dumber cat
  my_cat = MyCat.new('fish')
  my_cat.dinner_time!  # => It's dinner time!
                      # => I had a great time. I'd like some more fish!
                      # => No, really, is there some more fish?


== Options

You're free to pass any number of arguments to #run_callback.

  cat.run_hook :before_dinner, cat, Time.now

The callbacks should be ready for receiving parameters.

  before_dinner :wash_pawns
  before_dinner do |who, when|
    ...
  end

  def wash_pawns(who, when)


Not sure why a cat should have ice cream for dinner. Beside that, I was tempted naming this gem _hooker_.


== Installation

  gem install hooks


== Dependencies

The current gem requires

* active_support 2.3.x


== Anybody using it?

* Hooks is already used in [Apotomo:http://github.com/apotonick/apotomo], a hot widget framework for Rails. Look at +lib/apotomo/widget.rb+ for examples and into +lib/apotomo/tree_node.rb+ to learn how modules-driven code might benefit from hooks.

== Similar libraries

* http://github.com/nakajima/aspectory
* http://github.com/auser/backcall
* http://github.com/mmcgrana/simple_callbacks


== License

Copyright (c) 2010, Nick Sutterer

Released under the MIT License.
